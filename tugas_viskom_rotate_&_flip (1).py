# -*- coding: utf-8 -*-
"""Tugas Viskom Rotate & Flip

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nb6G6WHnDvIA5a3ykVLmEWMIxB5x4ux0

**Rotate**
"""

import numpy as np
import cv2
import math
from matplotlib import pyplot as plt

# Fungsi untuk melakukan rotasi gambar tanpa fungsi bawaan
def rotate_image(image, angle):
    # Mendapatkan dimensi gambar
    height, width = image.shape[:2]

    # Menghitung titik tengah gambar
    x_tengah = width // 2
    y_tengah = height // 2

    # Konversi sudut dari derajat ke radian
    theta = math.radians(angle)

    # Menghitung dimensi baru untuk mencakup gambar setelah rotasi
    new_width = int(abs(height * math.sin(theta)) + abs(width * math.cos(theta)))
    new_height = int(abs(height * math.cos(theta)) + abs(width * math.sin(theta)))

    # Membuat array kosong dengan dimensi baru untuk menyimpan gambar hasil rotasi
    rotated_image = np.zeros((new_height, new_width, 3), dtype=image.dtype)

    # Menghitung titik tengah gambar yang baru
    x_tengah_baru = new_width // 2
    y_tengah_baru = new_height // 2

    # Looping melalui setiap piksel pada gambar
    for y in range(height):
        for x in range(width):
            # Menggeser titik ke pusat gambar asli
            x_geser = x - x_tengah
            y_geser = y - y_tengah

            # Menerapkan matriks rotasi
            x_baru = int(x_geser * math.cos(theta) - y_geser * math.sin(theta) + x_tengah_baru)
            y_baru = int(x_geser * math.sin(theta) + y_geser * math.cos(theta) + y_tengah_baru)

            # Memeriksa apakah koordinat baru masih dalam batas gambar
            if 0 <= x_baru < new_width and 0 <= y_baru < new_height:
                rotated_image[y_baru, x_baru] = image[y, x]

    return rotated_image

# Membaca gambar
image = cv2.imread('/content/pemandangan.jpg')

# Rotasi gambar sebesar 90 derajat
rotated_img = rotate_image(image, 90)

# Menampilkan gambar asli dan gambar hasil rotasi
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))  # Konversi BGR ke RGB untuk tampilan di matplotlib

plt.subplot(1, 2, 2)
plt.title('Rotated Image')
plt.imshow(cv2.cvtColor(rotated_img, cv2.COLOR_BGR2RGB))  # Konversi BGR ke RGB untuk tampilan di matplotlib

plt.show()

import numpy as np
import cv2
import math
from matplotlib import pyplot as plt

# Fungsi untuk melakukan rotasi gambar tanpa fungsi bawaan
def rotate_image_counterclockwise(image, angle):
    # Mendapatkan dimensi gambar
    height, width = image.shape[:2]

    # Menghitung titik tengah gambar
    x_tengah = width // 2
    y_tengah = height // 2

    # Konversi sudut dari derajat ke radian dengan tanda negatif untuk rotasi berlawanan arah jarum jam
    theta = math.radians(-angle)

    # Menghitung dimensi baru untuk mencakup gambar setelah rotasi
    new_width = int(abs(height * math.sin(theta)) + abs(width * math.cos(theta)))
    new_height = int(abs(height * math.cos(theta)) + abs(width * math.sin(theta)))

    # Membuat array kosong dengan dimensi baru untuk menyimpan gambar hasil rotasi
    rotated_image = np.zeros((new_height, new_width, 3), dtype=image.dtype)

    # Menghitung titik tengah gambar yang baru
    x_tengah_baru = new_width // 2
    y_tengah_baru = new_height // 2

    # Looping melalui setiap piksel pada gambar
    for y in range(height):
        for x in range(width):
            # Menggeser titik ke pusat gambar asli
            x_geser = x - x_tengah
            y_geser = y - y_tengah

            # Menerapkan matriks rotasi berlawanan arah jarum jam
            x_baru = int(x_geser * math.cos(theta) - y_geser * math.sin(theta) + x_tengah_baru)
            y_baru = int(x_geser * math.sin(theta) + y_geser * math.cos(theta) + y_tengah_baru)

            # Memeriksa apakah koordinat baru masih dalam batas gambar
            if 0 <= x_baru < new_width and 0 <= y_baru < new_height:
                rotated_image[y_baru, x_baru] = image[y, x]

    return rotated_image

# Membaca gambar
image = cv2.imread('/content/WhatsApp Image 2024-11-05 at 22.17.12.jpeg')

# Rotasi gambar sebesar 90 derajat berlawanan arah jarum jam
rotated_img = rotate_image_counterclockwise(image, 90)

# Menampilkan gambar asli dan gambar hasil rotasi
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))  # Konversi BGR ke RGB untuk tampilan di matplotlib

plt.subplot(1, 2, 2)
plt.title('Rotated Image')
plt.imshow(cv2.cvtColor(rotated_img, cv2.COLOR_BGR2RGB))  # Konversi BGR ke RGB untuk tampilan di matplotlib

plt.show()

"""**Flip**"""

timport numpy as np
import cv2
from matplotlib import pyplot as plt

# Fungsi untuk flip horizontal (membalikkan gambar secara horizontal)
def flip_horizontal(image):
    # Mendapatkan dimensi gambar
    height, width = image.shape[:2]

    # Membuat array kosong untuk menyimpan gambar hasil flip horizontal
    flipped_image = np.zeros_like(image)

    # Looping melalui setiap piksel
    for y in range(height):
        for x in range(width):
            # Menempatkan piksel dari sisi kanan ke kiri
            flipped_image[y, width - x - 1] = image[y, x]

    return flipped_image

# Fungsi untuk flip vertikal (membalikkan gambar secara vertikal)
def flip_vertical(image):
    # Mendapatkan dimensi gambar
    height, width = image.shape[:2]

    # Membuat array kosong untuk menyimpan gambar hasil flip vertikal
    flipped_image = np.zeros_like(image)

    # Looping melalui setiap piksel
    for y in range(height):
        for x in range(width):
            # Menempatkan piksel dari atas ke bawah
            flipped_image[height - y - 1, x] = image[y, x]

    return flipped_image

# Membaca gambar
image = cv2.imread('/content/pemandangan.jpg')

# Flip horizontal dan vertikal
flipped_horizontally = flip_horizontal(image)
flipped_vertically = flip_vertical(image)

# Membesarkan ukuran kotak hasil flip dengan plt.figure atau plt.subplots
plt.figure(figsize=(15, 5))  # Memperbesar ukuran figure (15x5 inches)

# Menampilkan gambar asli
plt.subplot(1, 3, 1)
plt.title('Original Image')
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))  # Konversi BGR ke RGB

# Menampilkan gambar flip horizontal
plt.subplot(1, 3, 2)
plt.title('Horizontally Flipped')
plt.imshow(cv2.cvtColor(flipped_horizontally, cv2.COLOR_BGR2RGB))

# Menampilkan gambar flip vertikal
plt.subplot(1, 3, 3)
plt.title('Vertically Flipped')
plt.imshow(cv2.cvtColor(flipped_vertically, cv2.COLOR_BGR2RGB))

# Mengatur tata letak secara otomatis agar tidak saling tumpang tindih
plt.tight_layout()

# Menampilkan plot
plt.show()